name: Auto Grading

on:
  pull_request_target:
    types: [opened, synchronize]
    branches:
      - main
      - "cicd/**"
    paths:
      - "submission/**"

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  check_files:
    name: 'Check files changed'
    runs-on: ubuntu-latest
    outputs:
      submission_changes: ${{ steps.filtered-changed-files.outputs.any_changed }}
      changed_files: ${{ steps.filtered-changed-files-list.outputs.changed_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Get all changed files
        id: tj-actions-changed-files
        uses: tj-actions/changed-files@v44
      
      - name: Get submission file changes in a single push
        id: filtered-changed-files
        run: |
          files_changed_pr="${{ steps.tj-actions-changed-files.outputs.all_changed_files }}"
          echo "Files changed in PR: $files_changed_pr"
          echo ''

          files_changed_push="$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})"
          for file in $files_changed_push; do
            if [[ " $files_changed_pr " =~ " $file " ]]; then
              echo "Found changes in $file"
              if [[ $file == submission/* ]]; then
                echo "Adding '$file' to filtered list"
                files_changed_push_filtered+=( "$file" )
              fi
            fi
          done
          echo ''

          all_changed_files=$(echo "${files_changed_push_filtered[@]}" | xargs)
          echo "Filtered list of files changed: '$all_changed_files'"

          any_changed=$(if [ -n "$all_changed_files" ]; then echo 'true'; else echo 'false'; fi)
          echo "Any changed: $any_changed"
          
          echo "::set-output name=all_changed_files::$all_changed_files"
          echo "::set-output name=any_changed::$any_changed"

      # Set output indicating whether any submission files have changed
      - name: Run step only if any submission file(s) changed
        id: filtered-changed-files-list
        if: steps.filtered-changed-files.outputs.any_changed == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.filtered-changed-files.outputs.all_changed_files }}
        run: |
          echo "One or more files in the submission folder has changed."
          echo "Files changed: ${ALL_CHANGED_FILES// /,}"
          echo "::set-output name=changed_files::${ALL_CHANGED_FILES// /,}"

  configure_environment:
    name: 'Configure environment'
    runs-on: ubuntu-latest
    needs: [check_files]
    if: needs.check_files.outputs.submission_changes == 'true'
    outputs:
      assignment: ${{ steps.get_variables.outputs.assignment_name }}
      assignment_schema: ${{ steps.get_variables.outputs.schema_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      # Generate variables using GitHub context
      - name: Generate variables using GitHub context
        id: get_variables
        run: |
          assignment="dimensional-data-modeling" # $(basename "${{ github.event.repository.full_name }}")
          echo "Assignment: $assignment"
          echo "::set-output name=assignment_name::$assignment"
          schema="$(echo "$(basename "${{ github.repository }}")" | tr '-' '_')_${{github.event.number}}_test"
          echo "Test Schema: $schema"
          echo "::set-output name=schema_name::$schema"

  deploy_application:
    name: 'Deploy application'
    runs-on: ubuntu-latest
    needs: [check_files, configure_environment]
    if: needs.check_files.outputs.submission_changes == 'true'
    env:
      SUBMISSION_DIR: 'submission'
      CHANGED_FILES: ${{ needs.check_files.outputs.changed_files }}
      ASSIGNMENT: ${{ needs.configure_environment.outputs.assignment }}
      ASSIGNMENT_SCHEMA: ${{ needs.configure_environment.outputs.assignment_schema }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      GITHUB_ORG: ${{ github.event.repository.owner.login }}
      GITHUB_REPO: ${{ github.repository }}
      SECRET_NAME: ${{ secrets.SECRET_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      
      # Add GitHub environment variables to '.env' file
      - name: Add GitHub environment variables to '.env' file
        run: env > .env
      
      # Build the Docker image
      - name: Build the Docker image
        run: docker build -t autograding .
      
      # Run the autograding application
      - name: Run the autograding application
        run: docker run --env-file .env --name autograding autograding
